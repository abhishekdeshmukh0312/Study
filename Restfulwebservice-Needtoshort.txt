Question 1 : What is REST?
Answer : REST is an architectural style of developing web services which take advantage of ubiquity of HTTP protocol and leverages HTTP method to define actions. REST stands for REpresntational State Transfer.


Question 2 : What is RESTFul Web Service?
Answer : There are two popular way to develop web services, using SOAP (Simple Object Access Protocol) which is XML based way to expose web services and second REST based web services which uses HTTP protocol. Web services developed using REST style is also known as RESTful web services.


Question 3 : What is HTTP Basic Authentication and how it works?


Question 4 : Can you tell me which API can be used to develop RESTFul web service in Java?
Answer : There are many framework and libraries out there which helps to develop RESTful web services in Java including JAX-RS which is standard way to develop REST web services. Jersey is one of the popular implementation of JAX-RS which also offers more than specification recommends. Then you also have RESTEasy, RESTlet and Apache CFX. If you like Scala then you can also use Play framework to develop RESTful web services.


Question 5 : How do you configure RESTFul web service?

Question 6 : How you apply security in RESTFul web services?

Question 7 : Have you used securing RESTful APIs with HTTP Basic Authentication

Question 8 : How you maintain session in RESTful services?


Question 9 : Have you used Jersey API to develop RESTful services in Java?
Answer : Jersey is one of the most popular framework and API to develop REST based web services in Java. Since many organization uses Jersey they check if candidate has used it before or not. It's simple to answer, say Yes if you have really used and No, if you have not. In case of No, you should also mention which framework you have used for developing RESTful web services e.g. Apache CFX, Play or Restlet.


Question 10 : How you test RESTful web services?

Question 11 : What is WADL in RESTFul?


Question 12 : What do you understand by payload in RESTFul?
Answer : Payload means data which passed inside request body also payload is not request parameters. So only you can do payload in POST  and not in GET and DELTE method


Question 13 : Can you do payload in GET method?
Answer : No, payload can only be passed using POST method.


Question 14 : Can you do payload in HTTP DELETE?
Answer : This is again similar to previous REST interview question, answer is No. You can only pass payload using HTTP POST method.


Question 15 : How much maximum pay load you could do in POST method?
Answer : If you remember difference between GET and POST request then you know that unlike GET which passes data on URL and thus limited by maximum URL length, POST has no such limit. So, theoretically you can pass unlimited data as payload to POST method but you need to take practical things into account e.g. sending POST with large payload will consume more bandwidth, take more time and present performance challenge to your server.


Question 16 : What is difference between SOAP and RESTFul web services?
Answer : There are many difference between these two style of web services e.g. SOAP take more bandwidth because of heavy weight XML based protocol but REST takes less bandwidth because of popular use of JSON as message protocol and leveraging HTTP method to define action. This also means that REST is faster than SOAP based web services. You can derive many differences between SOAP and RESTful with the fact that its HTTP based e.g. REST URLs can be cached or bookmarked. Here are few more differences between them :

RESTFul web services interview questions answers


Question 17 : If you have to develop web services which one you will choose SOAP OR RESTful and why?
Answer : You can answer this question based upon your experience but the key here is if you know difference between them than you can answer this question in more detail. For example, its easy to develop RESTful web services than SOAP based web services but later comes with some in-built security features.


Question 18 :  What framework you had used to develop RESTFul services?
Answer : This is really experience based question. If you have used Jersey to develop RESTFul web services then answer as Jersey but expect some follow-up question on Jersey. Similarly if you have used Apache CFX or Restlet then answer them accordingly.


That's all in this list of some good RESTful web service interview questions for Java developers. Though this list is meant for Java developer, you can use this questions to check any candidate's knowledge on REST style web services independent of programming language because REST doesn't say that you need to implement web service in Java only. Since it take advantage of ubiquitous HTTP protocol you can build backed with any web technology stack e.g. Java, .NET or any other.

Read more: http://www.java67.com/2015/09/top-10-restful-web-service-interview-questions-answers.html#ixzz4xkqIj717

*************************************

 What is a REST Web Service?

There are a set of architectural constraints (we will discuss them shortly) called Rest Style Constraints. Any service which satisfies these constraints is called RESTful Web Service.

There are a lot of misconceptions about REST Web Services : They are over HTTP , based on JSON etc. Yes : More than 90% of RESTful Web Services are JSON over HTTP. But these are not necessary constraints. We can have RESTful Web Services which are not using JSON and which are not over HTTP.
What are important constraints for a RESTful Web Service?

The five important constraints for RESTful Web Service are

    Client - Server : There should be a service producer and a service consumer.
    The interface (URL) is uniform and exposing resources. Interface uses nouns (not actions)
    The service is stateless. Even if the service is called 10 times, the result must be the same.
    The service result should be Cacheable. HTTP cache, for example.
    Service should assume a Layered architecture. Client should not assume direct connection to server - it might be getting info from a middle layer - cache.

What is Richardson Maturity Model?

Richardson Maturity Model defines the maturity level of a Restful Web Service. Following are the different levels and their characteristics.

    Level 0 : Expose SOAP web services in REST style. Expose action based services (http://server/getPosts, http://server/deletePosts, http://server/doThis, http://server/doThat etc) using REST.
    Level 1 : Expose Resources with proper URI’s (using nouns). Ex: http://server/accounts, http://server/accounts/10. However, HTTP Methods are not used.
    Level 2 : Resources use proper URI's + HTTP Methods. For example, to update an account, you do a PUT to . The create an account, you do a POST to . Uri’s look like posts/1/comments/5 and accounts/1/friends/1.
    Level 3 : HATEOAS (Hypermedia as the engine of application state). You will tell not only about the information being requested but also about the next possible actions that the service consumer can do. When requesting information about a facebook user, a REST service can return user details along with information about how to get his recent posts, how to get his recent comments and how to retrieve his friend’s list.

What are the best practices in designing RESTful APIs?

    While designing any API, the most important thing is to think about the api consumer i.e. the client who is going to use the service. What are his needs? Does the service uri make sense to him? Does the request, response format make sense to him?
    In Rest, we think Nouns (resources) and NOT Verbs (NOT actions). So, URI’s should represent resources. URI’s should be hierarchical and as self descriptive as possible. Prefer plurals.
    Always use HTTP Methods. Best practices with respect to each HTTP method is described in the next question.

What are the best practices in using HTTP methods with Restful Web Services?

    GET : Should not update anything. Should be idempotent (same result in multiple calls). Possible Return Codes 200 (OK) + 404 (NOT FOUND) +400 (BAD REQUEST)
    POST : Should create new resource. Ideally return JSON with link to newly created resource. Same return codes as get possible. In addition : Return code 201 (CREATED) is possible.
    PUT : Update a known resource. ex: update client details. Possible Return Codes : 200(OK)
    DELETE : Used to delete a resource.

Can you explain a little bit about JAX-RS?

JAX-RS is the JEE Specification for Restful web services implemented by all JEE compliant web servers (and application servers).

Important Annotations:

    @ApplicationPath("/"). @Path("users") : used on class and methods to define the url path.
    @GET @POST : Used to define the HTTP method that invokes the method.
    @Produces(MediaType.APPLICATION_JSON) : Defines the output format of Restful service.
    @Path("/{id}") on method (and) @PathParam("id") on method parameter : This helps in defining a dynamic parameter in Rest URL. @Path("{user_id}/followers/{follower_id}") is a more complicated example.
    @QueryParam("page") : To define a method parameter ex: /users?page=10.

Useful methods:

    Response.OK(jsonBuilder.build()).build() returns json response with status code.
    Json.createObjectBuilder(). add("id",user.getId()); creates a user object.

What are the advantages of Restful web services?

    Lightweight : Easy to consume from mobile devices also.
    Easy to expose : Little or no restrictions on output format and communication protocol.
    Most Restful services use HTTP protocol : Entire web is based on HTTP and is built for efficiency of HTTP. Things like HTTP caching enable Restful services to be effective.
    High Performance : Less xml & soap overhead and More caching enable Restful services to be highly performant.

What is the difference between REST and SOAP Based Services?

First of all, REST is a set of architectural principles defining how a RESTful service should look look like. SOAP is a message exchange format. SOAP defines the structure of message to exchanged. How should the header be? How should the request content be? So, there is no real comparison between REST and SOAP.

To get a real comparison, I compare two popular implementation of these concepts.

    Restful Sample Implementation : JSON over HTTP
    SOAP Sample Implementation : XML over SOAP over HTTP

All comparison is between the Sample Restful and SOAP implementations described above.

    REST is built over simple HTTP protocol. SOAP services are more complex to implement and more complex to consume.
    REST has better performance and scalability. REST reads can be cached, SOAP based reads cannot be cached.
    REST permits many different data formats (JSON is the most popular choice) where as SOAP only permits XML.
    SOAP services have well defined structure and interface (WSDL).
    SOAP is based on well defined standards (WS-Security, WS-AtomicTransaction and WS-ReliableMessaging).

	*******************************************************
	
	 1) What is REST and RESTful web services ?
this is the first REST interview question on most of interviews as not everybody familiar with REST and also
start discussion based on candidates response. Anyway REST stands for REpresentational State Transfer (REST) its a relatively new concept of writing web services which enforces a stateless client server design where web services are treated as resource and can be accessed and identified by there URL unlike SOAP web services which were defined by WSDL.

Web services written by apply REST Architectural concept are called RESTful web services which focus on System resources and how state of Resource should be transferred over http protocol to a different clients written in different languages. In RESTful web services http methods like GET, PUT, POST and DELETE can can be used to perform CRUD operations.

2) What is differences between RESTful web services and SOAP web services ?
Though both RESTful web series and SOAP web service can operate cross platform they are architecturally different to each other, here is some of differences between REST and SOAP:

1) REST is more simple and easy to use than SOAP
2) REST uses HTTP protocol for producing or consuming web services while SOAP uses XML.
3) REST is lightweight as compared to SOAP and preferred choice in mobile devices and PDA's.
4) REST supports different format like text, JSON and XML while SOAP only support XML.
5) REST web services call can be cached to improve performance.REST Web Services Framework Interview Questions


3) What is Restlet framework ?
Restlet is leading RESTful web framework for Java applications is used to build RESTFul web services it has two part Restlet API and a Restlet implementation much like Servlet specification. There are many implementation of Restlet framework available you just need to add there jar in your classpath to use them. By using Restlet web framework you can write client and server.

4) What is Resource in REST framework ?
it represent a "resource" in REST architecture. on RESTLET API it has life cycle methods like init(), handle() and release() and contains a Context, Request and Response corresponding to specific target resource. This is now deprecated over ServerResource class and you should use that. see Restlet documentation for more details.

5) Can you use Restlet without any web-container ?
Yes, Restlet framework provide default server which can be used to handle service request in web container is not available.

6) What is difference between Restlets and Jersey ?
This REST web service interview questions is open for you all, post you answer in comment section.

7) What is RESTEasy ?
RESTEasy is another REST framework introduced in JBoss Application Server. This was rather easy REST interview questions. you can answer in detail only if you have used this or working in JBoss.

8) What are the tools used for creating RESTFull web services ?
You can use AJAX(Asynchronous JavaScript with XAML) and Direct Web Removing to consume web serives in web application. Both Eclipse and NetBeans also supported development of RESTFul services.

9) How to display custom error pages using RestFull web services ?
In order to customize error you need to extend StatusService and implement getRepresentation(Status, Request, Response) method with your custom code now assign instance of your CustomStatusService to appropriate "statusService property".

10) Which HTTP methods are supported by RestFull web services ?
Another common REST interview questioning RESTFul web service each Resource supports GET, POST, PUT and DELETE http methods.GET is mapped to represent(), POST - acceptRepresentation(), PUT- storeRepresentation and DELET for rmeoveRepresentation.

11) What is difference between top-down and bottom-up approach of developing web services ?
In top-down approach first WSDL document is created and than Java classes are developed based on WSDL contract, so if WSDL contract changes you got to change your Java classes while in case of bottom up approach of web service development you first create Java code and then use annotations like @WebService to specify contract or interface and WSDL field will be automatically generated from your build.

12) What happens if RestFull resources are accessed by multiple clients ? do you need to make it thread-safe?
Since a new Resource instance is created for every incoming Request there is no need to make it thread-safe or add synchronization. multiple client can safely access RestFull resources concurrently.

REST Web Service interview questions and Answers J2EE
That’s all on REST interview questions , I will add couple of  more REST Interview questions whenever I got them from my friend circle.

Read more: http://javarevisited.blogspot.com/2012/01/rest-web-services-framework-interview.html#ixzz4xkqaanO0
****************************************


March 31, 2017
No Comments
Spring REST Web Services Interview Questions and Answers
Spring REST Web Services Interview Questions and Answers

In this tutorial, I am putting collection of frequently asked important spring REST web services interview questions with answers. It will be help in the Spring REST related questions in the interview. You could also read my another articles related to Spring interview questions with answers for helping in the Spring related interviews. These articles listed as below.

    Spring Core Interview Questions and Answers
    Spring AOP Interview Questions and Answers
    Spring MVC Interview Questions and Answers
    Spring Security Interview Questions and Answers

Let’s see the below questions related to Spring REST web services.
Spring REST Service Interview Questions

    Define Web Service?
    What does REST stand for? and what is RESTful web services?
    What is differences between RESTful web services and SOAP web services?
    What is a resource?
    What are safe REST operations?
    What are idempotent operations? Why is idempotency important?
    Is REST scalable and/or interoperable?
    What are the advantages of the RestTemplate?
    Which HTTP methods does REST use?
    What is an HttpMessageConverter?
    Is REST normally stateless?
    What does @RequestMapping do?
    Is @Controller a stereotype? Is @RestController a stereotype?
    What is the difference between @Controller and @RestController?
    When do you need @ResponseBody?
    What does @PathVariable do?
    What is the HTTP status return code for a successful DELETE statement?
    What does CRUD mean?
    Is REST secure? What can you do to secure it?
    Where do you need @EnableWebMVC?
    Name some common http response codes. When do you need @ResponseStatus?
    Does REST work with transport layer security (TLS)?
    Do you need Spring MVC in your classpath for Spring REST?

1. Define Web Service?
A web service is a kind of software that is accessible on the Internet. It makes use of the XML messaging system and offers an easy to understand, interface for the end users.

2. What does REST stand for? and what is RESTful web services?
REST stand for REpresentational State Transfer, term by Roy Fielding. REST is an architectural style that describes best practices to expose web services over HTTP with Emphasizes scalability. Web services written by apply REST Architectural concept are called RESTful web services which focus on System resources and how state of Resource should be transferred over http protocol to a different clients written in different languages. In RESTful web services http methods like GET, PUT, POST and DELETE can can be used to perform CRUD operations. Read more about REST.

3. What is differences between RESTful web services and SOAP web services?
1) REST is more simple and easy to use than SOAP
2) REST uses HTTP protocol for producing or consuming web services while SOAP uses XML.
3) REST is lightweight as compared to SOAP and preferred choice in mobile devices and PDA’s.
4) REST supports different format like text, JSON and XML while SOAP only support XML.
5) REST web services call can be cached to improve performance.

4. What is a resource?
The key abstraction of information in REST is a resource. Any information that can be named can be a resource like Student, Employee etc. REST is resource based API. Expose resources through URIs like http://localhost:8080/api/employees/1111, It is based on Model nouns, not verbs. Resources support limited set of operations – GET, PUT, POST, DELETE in case of HTTP. Example: update an employee use PUT to /employees/1111 and don’t POST to /employees/edit?id=1111 and Resources can support multiple representations like HTML, XML, JSON etc. Multiple URIs may refers to same resource as like CRUD operation on employee resource using HTTP verbs. Read More>>>

5. What are safe REST operations?
Safe REST operations are HTTP methods that do not modify resources. For example, using GET or HEAD on a resource URL, should NEVER change the resource. But it is still possible, that safe operations do change things on a server or resource. For example: GET http://localhost:8080/api/employees/1111/delete HTTP/1.1 but it is incorrect, this would actually delete the employee i.e. Safe methods are methods that can be cached, prefetched without any repercussions to the resource.

6. What are idempotent operations? Why is idempotency important?
Idempotent operations are those HTTP methods that can be called repetitively many times without different outcomes. It would not matter if the method is called only once, or many times over. The result should be the same. Again, this only applies to the result, not the resource itself.
Consider the following examples:

a = 4; (is idempotent)
a++; (is not idempotent)

Idempotency is important in building a fault-tolerant API. Suppose a client wants to update a resource through POST. Since POST is not a idempotent method, calling it multiple times can result in wrong updates. What would happen if you sent out the POST request to the server, but you get a timeout. Is the resource actually updated? Does the timeout happened during sending the request to the server, or the response to the client? Can we safely retry again, or do we need to figure out first what has happened with the resource? By using idempotent methods, we do not have to answer this question, but we can safely resend the request until we actually get a response back from the server.
HTTP Method 	Idempotent 	Safe
OPTIONS 	yes 	yes
GET 	yes 	yes
HEAD 	yes 	yes
PUT 	yes 	no
POST 	no 	no
DELETE 	yes 	no
PATCH 	no 	no
Popular Tutorials

    Spring Tutorial
    Spring MVC Web Tutorial
    Spring Boot Tutorial
    Spring Security Tutorial
    Spring AOP Tutorial
    Spring JDBC Tutorial
    Spring HATEOAS
    Microservices with Spring Boot
    REST Webservice
    Core Java
    Hibernate Tutorial
    Spring Batch

7. Is REST scalable and/or interoperable?
Yes, REST is scalable and interoperable.

8. What is the RestTemplate and It’s advantages?
In Spring REST client, The RestTemplate is the core class for client-side access to Spring RESTful web services. It communicates HTTP server using RESTful constraints. It is very similar to other template classes in the Spring like JdbcTemplate and HibernateTemplate etc. In Spring, RestTemplate provides higher level implementation of corresponding HTTP methods such as GET, POST, PUT, DELETE, HEAD etc. It provides the methods to communicate by using these HTTP methods with URI template, URI params, request object and response type as arguments. Read More about RestTemplate.

9. Which HTTP methods does REST use?
RestTemplate provides higher level implementation of corresponding HTTP methods such as GET, POST, PUT, DELETE, HEAD etc.

10. What is an HttpMessageConverter?
HttpMessageConverter is a strategy interface that specifies a converter that can convert from and to HTTP requests and responses. Internally Spring MVC uses it to convert the Http request to an object representation and back. Message converters are used to marshall and unmarshall Java Objects to and from JSON, XML, etc – over HTTP. Read More about HttpMessageConverter in Spring.

11. Is REST normally stateless?
Yes.

12. What does @RequestMapping do?
@RequestMapping can be applied to the controller class as well as methods. This annotation for mapping web requests onto specific handler classes and/or handler methods. Read more about @RequestMapping annotation.

13. Is @Controller a stereotype? Is @RestController a stereotype?
Yes.

14. What is the difference between @Controller and @RestController?
The key difference between a traditional Spring MVC @Controller and the RESTful web service @RestController is the way the HTTP response body is created. While the traditional MVC controller relies on the View technology, the RESTful web service controller simply returns the object and the object data is written directly to the HTTP response as JSON/XML by registered HttpMessageConverters.

15. When do you need @ResponseBody?
When you use the @ResponseBody annotation on a method, Spring converts the return value and writes it to the http response automatically. Each method in the Controller class must be annotated with @ResponseBody.

16. What does @PathVariable do?
@PathVariable is used to pass parameter along with the url, sometimes we need to pass parameters along with the url to get the data. Spring MVC provides support for customizing the URL in order to get data. To achieving this purpose @PathVariable annotation is used in Spring mvc framework. Read More about PathVariable.

17. What is the HTTP status return code for a successful DELETE statement?
Either we can return HTTP status 204 (NO CONTENT) with no response body or return HTTP status 200 (OK) along with a response body with representation of the deleted item.

18. What does CRUD mean?
In Spring REST, the primary or most-commonly-used HTTP verbs are POST, GET, PUT, PATCH, and DELETE. These correspond to create, read, update, and delete (or CRUD) operations, respectively.

19. Is REST secure? What can you do to secure it?
REST is nothing but it architectural desgin or paradigms to design restful web service. So REST does not provide any security constraints by default but we can implement it in the RESTful web services by using security layers like transport layer security (TLS), auth token security.

20. Where do you need @EnableWebMVC?
@EnableWebMvc- It used for enabling spring mvc behavior i.e. it is responsible for registering Spring MVC required Bean Post Processors in the application as like Jackson2JsonMessageConverter etc.

21. Name some common http response codes. When do you need @ResponseStatus?

    2xx Success
        200 OK
        201 Created
        204 No Content
    3xx Redirection
        304 Not Modified
    4xx Client Error
        400 Bad Request
        401 Unauthorized
        403 Forbidden
        404 Not Found
        409 Conflict
    5xx Server Error
        500 Internal Server Error
        503 Service Unavailable

@ResponseStatus annotation available on custom exceptions and to map these exceptions to HTTP status codes.

22. Does REST work with transport layer security (TLS)?
Yes. Transport Layer Security can encrypt the communication to a RESTful Webservice and authenticate the server to a client.

23. Do you need Spring MVC in your classpath for Spring REST?
Yes, Spring REST uses the Spring MVC annotations like @RestController, @RequestBody and @ResponseBody etc.

*******************************************

Q #1) What is your understanding of what are RESTful web services?

Just like SOAP (Simple Object Access Protocol), which is used to develop web services by XML method, RESTful web services use web protocol i.e. HTTP protocol method. They have the feature like scalability, maintainability, help multiple application communication built on various programming languages etc.

RESTful web service implementation defines the method of accessing various resources which are required by the client and he has sent the request to the server through the web browser. The important aspects of this implementation include:

    Resources
    Request Headers
    Request Body
    Response Body
    Status codes

Q #2) Name the protocol which is used by RESTful web services.

RESTful web services use a famous web protocol i.e. HTTP protocol. This serves as a medium of data communication between client and server. HTTP standard methods are used to access resources in RESTful web service architecture.

Q #3) Explain the term ‘Addressing’ with respect to RESTful WEB service.

Just like we require address with postal code to reach any person, in the same way, ‘Addressing’ locates resources that are present on the server for the purpose of hosting web services. This is usually done with URI i.e. Unified Resource Identifier.

Q #4) Enlist features of RESTful web services.

Every RESTful web services should have following features and characteristics that are enlisted below:

    Based on the Client Server representation.
    Use of HTTP protocol for performing functions like fetching data from the web service, retrieving resources, execution of any query, etc.
    The communication between the server and client is performed through the medium known as ‘messaging’.
    Addressing of resources available on the server through URIs.
    Based on the concept of statelessness where every client request and the response is independent of the other with complete assurance of providing required information.
    Uses the concept of caching.
    Works on Uniform interface.

Q #5) Explain messaging technique.

Messages are the mode of exchanging data for any type of communication to take place. In the same way, HTTP protocol plays the role of message communication between the client and server through HTTP Request and Response methods. HTTP request is sent by the client who contains information about the data and in turn, receives HTTP Response from the server.

Messages are the collection of information about the data i.e. Metadata.

Q #6) What are the core components of HTTP request and HTTP response?

The core components that come under HTTP Request are:

    Verb: Includes methods like GET, PUT, POST, etc.
    Uniform Resource Identifier for identifying the resources available on the server.
    HTTP Version for specifying the HTTP version.
    HTTP Request header for containing the information about the data.
    HTTP Request body that contains the representation of the resources in use.

The core components that come under HTTP Response are:

    Request Code: This contains various codes which determine the status of the server response.
    HTTP Version for specifying the HTTP version.
    HTTP Response header for containing the information about the data.
    HTTP Response body that contains the representation of the resources in use.

Q #7) Explain the term ‘Statelessness’ with respect to RESTful WEB service.

In REST, ST itself defines State Transfer and Statelessness means complete isolation. This means, the state of the client’s application is never stored on the server and is passed on. In this process, the clients send all the information that is required for the server to fulfill the HTTP request that has been sent. Thus every client request and the response is independent of the other with complete assurance of providing required information.

Every client passes a ‘session identifier’ which also acts as an identifier for each session.

Q #8) Enlist advantages and disadvantages of ‘Statelessness’.

In the above question, we have understood the meaning of statelessness with respect to the client-server communication. Now, let us see some of its advantages and disadvantages.

Advantages:

    Every method required for communication is identified as an independent method i.e. there are no dependencies to other methods.
    Any previous communication with the client and server is not maintained and thus the whole process is very much simplified.
    If any information or metadata used earlier in required in another method, then the client sends again that information with HTTP request.
    HTTP protocol and REST web service, both shares the feature of statelessness.

Disadvantages:

    In every HTTP request from the client, the availability of some information regarding the client state is required by the web service.

Q #9) Enlist some important constraints for RESTful web services.

Every constraint has positive as well as negative impacts and to produce an overall architecture, there should be the balance between both of them. Below mentioned are some important constraints for RESTful web service:


    There should be separate concerns for each server and client which will help to maintain the modularity within the application. This will also reduce the complexity and increase the scalability.
    The client-server communication should be stateless, which means no previous information is used and the complete execution is done in isolation. In cases of failure, it also helps the client to recover.
    In client-server communication, the HTTP response should be cacheable so that when required cached copy can be used which in turn enhances the scalability and performance of the server.
    The fourth constraint is the uniform interface which allows client-server interaction to be easily understood. This constraint is further divided into four sub-constraints as:
        Resource Identification
        Resource manipulation
        Each message is easily understood and is self-descriptive.
        Hypermedia, which is defined as the text with hyperlinks and when clicked it moves to another application state.
    Client-server communication should be done on a layered system and thus the client should only have knowledge about the intermediate level with which communication is being done,

Q #10) What is a ‘Resource’?

Just like the ‘Object’ instance, we have learned in object orient programming Language, in the same way, ‘Resource’ is defined as an object of a type which can be an image, HTML file, text data, and any type of dynamic data. There are varieties of representation formats available in order to represent a resource.

Some most common are enlisted below:

    JSON
    YAML
    XML
    HTML

Q #11) Why proper representation of Resource is required?

Representation is very important because it determines the easy identification of resources. With proper representations of resource in the proper format, allows the client to easily understand the format.

Q #12) Enlist some important points that should be kept in mind while designing Resources representation for RESTful web services.

As there are no restrictions on the format in which the resource representation is done but just that the main requirement is the format of the representation should be as per the client requirement. A good resource representation is designed by considering the following main points:

    The resource representation format should be easily understood by the client and server.
    The representation should be complete regardless of its format structure, which may be complex or simple.
    In the case of the link of the resources to other resources, such cases should also be considered and handled.

Q #13) What is Caching?

Caching is the process in which server response is stored so that a cached copy can be used when required and there is no need of generating the same response again. This process not only reduces the server load but in turn increase the scalability and performance of the server. Only the client is able to cache the response and that too for a limited period of time.

Mentioned below are the header of the resources and their brief description so that they can be identified for the caching process:

    Time and Date of resource creation
    Time and date of resource modification that usually stores the last detail.
    Cache control header
    Time and date at which the cached resource will expire.
    The age which determines the time from when the resource has been fetched.

Q #14) Explain Cache-control header.

A standard Cache control header can help in attaining cache ability. Enlisted below is the brief description of various cache control header:

    Public: Resources that are marked as the public can be cached by any intermediate components between the client and server.
    Private: Resources that are marked as private can only be cached by the client.
    No cache means that particular resource cannot be cached and thus the whole process is stopped.

Q #15) What are the best practices that are to be followed while designing RESTful web services?

To design a secure RESTful web service, there are some best practices or say points that should be considered. These are explained as follows:

    Every input on the server should be validated.
    Input should be well formed.
    Never pass any sensitive data through URL.
    For any session, the user should be authenticated.
    Only HTTP error messages should be used for indicating any fault.
    Use message format that is easily understood and is required by the client.
    Unified Resource Identifier should be descriptive and easily understood.

Q #16) What is Payload?

The request data which is present in the body part of every HTTP message is referred as ‘Payload’.  In Restful web service, the payload can only be passed to the recipient through POST method.

There is no limit of sending data as payload through POST method but the only concern is that more data with consuming more time and bandwidth. This may consume much of user’s time also.

Q #17) Enlist some of the HTTP methods with description.

Mentioned below is the list of HTTP methods with their descriptions:

    GET: This is a read only operation which fetches the list of users on the server.
    PUT: This operation is used for the creation of any new resource on the server.
    POST: This operation is used for updating an old resource or for creating a new resource.
    DELETE: As the name suggests, this operation is used for deleting any resource on the server.
    OPTIONS: This operation fetches the list of any supported options of resources that are available on the server.

Q #18) What is the difference between PUT method and POST method?

The major difference between the PUT and POST method is that the result generated with PUT method is always same no matter how many times the operation is performed. On the other hand, the result generated by POST operation is always different every time.

Q #19) What is your understanding about JAX-RS?

JAX-RS is defined as the Java API for RESTful web service. Among multiple libraries and framework, this is considered as the most suitable Java programming language based API which supports RESTful web service.

Some of the implementations of JAX-RS are:

    Jersey
    RESTEasy
    Apache CFX
    Play

Among these, Jersey is the most popular framework.

Q #20) What are HTTP status codes? Enlist few with meaning.

HTTP status codes basically are the representation of the status of the task that has been performed on the server, with the mode of some codes. Every code has their own meaning.

Some of the HTTP status codes with their meaning are as follows:

    Code 200: This indicates success.
    Code 201: This indicates resource has been successfully created.
    Code 204: This indicates that there is no content in the response body.
    Code 404: This indicates that there is no method available.

There are few more such codes that indicate the status.
Conclusion:

This article will help you prepare for the RESTful web services interview and help you to understand the concept in the simple and easy way. I have tried to cover all the areas which are very necessary for having the complete knowledge about RESTful Web services.

Just remember, it may be possible that you are not able to answer all questions in the interview but whatever you answer should be accurate. Your basic concept should be strong and your confidence level should be high.
********************************************************
1) Explain what is REST and RESTFUL?

REST represents REpresentational  State Transfer; it is a relatively new aspect of writing web API.

RESTFUL is referred for web services written by applying REST architectural concept are called RESTful services, it focuses on system resources and how state of resource should be transported over HTTP protocol to different clients written in different language.  In RESTFUL web service HTTP methods like GET, POST, PUT and DELETE can be used to perform CRUD operations.

2) Explain the architectural style for creating web API?

The architectural style for creating web api are

    HTTP for client server communication
    XML/JSON as formatting language
    Simple URI as the address for the services
    Stateless communication

3) Mention what tools are required to test your web API?

SOAPUI tool for SOAP WS and Firefox “poster” plugin for RESTFUL services.

4) Mention what are the HTTP methods supported by REST?

HTTP methods supported by REST are:

    GET: It requests a resource at the request URL. It should not contain a request body as it will be discarded. Maybe it can be cached locally or on the server.
    POST: It submits information to the service for processing; it should typically return the modified or new resource
    PUT: At the request URL it update the resource
    DELETE: At the request URL it removes the resource
    OPTIONS: It indicates which techniques are supported
    HEAD: About the request URL it returns meta information

5) Mention whether you can use GET request instead of PUT to create a resource?

No, you are not supposed to use POST or GET.  GET operations should only have view rights

12-23-2014 12-07-18 PM

6) Mention what are resources in a REST architecture?

Resources are identified by logical URLs; it is the key element of a RESTful design.  Unlike, SOAP web services in REST, you view the product data as a resource and this resource should contain all the required information.

7) Mention what is the difference between AJAX and REST?

                                AJAX 	                                REST

    In Ajax, the request are sent to the server by using XMLHttpRequest objects. The response is used by the JavaScript code to dynamically alter the current page
    Ajax is a set of technology; it is a technique of dynamically updating parts of UI without having to reload the page
    Ajax eliminates the interaction between the customer and server asynchronously
    REST requires the interaction between the customer and server

	

     REST have a URL structure and a request/response pattern the revolve around the use of resources
    REST is a type of software architecture and a method for users to request data or information from servers
    REST requires the interaction between the customer and server

7) Mention some key characteristics of REST?

Some key characteristics of REST includes

    REST is stateless, therefore the SERVER has no state (or session data)
    With a well-applied REST API, the server could be restarted between two calls as every data is passed to the server
    Web service mostly uses POST method to make operations, whereas REST uses GET to access resources

8) Mention what are the different application integration styles?

The different integration styles include

    Shared database
    Batch file transfer
    Invoking remote procedure (RPC)
    Swapping asynchronous messages over a message oriented middle-ware (MOM)

9) Explain how JAXB related to RESTful web API?

JAXB stands for java arch for XML binding.

10) Mention what is the difference between PUT and POST?

“PUT” puts a file or resource at a particular URI and exactly at that URI.  If there is already a file or resource at that URI, PUT changes that file or resource.  If there is no resource or file there, PUT makes one

POST sends data to a particular URI and expects the resource at that URI to deal with the request.  The web server at this point can decide what to do with the data in the context of specified resource

PUT is idempotent meaning, invoking it any number of times will not have an impact on resources.

However, POST is not idempotent, meaning if you invoke POST multiple times it keeps creating more resources

11) Mention which markup language can be used in restful web api?

JSON and XML are the two markup language that can be used in restful web api

12) Mention what is the difference between RPC or document style web services? How you determine to which one to choose?

In document style web services, we can transport an XML message as part of SOAP request which is not possible in RPC style web service.  Document style web service is most appropriate in some application where XML message behaves as document and content of that document can alter and intention of web service does not rely on the content of XML message.

13) Mention what is JAX-WS and JAX-RS?

Both JAX-WS and JAX-RS are libraries (APIs) for doing communication in various ways in Java.  JAX-WS is a library that can be used to do SOAP communication in JAVA, and JAX-RS lets you do the REST communication in JAVA.

14) List out the tools or API for developing or testing web api?

Testing tools for web services for REST APIs includes

    Spring REST web service using MVC
    Jersey API
    CFX
    Axis
    Restlet,

15) Mention what is the difference between SOAP and REST?
SOAP 	REST

    SOAP is a protocol through which two computer communicates by sharing XML document
    SOAP permits only XML
    SOAP based reads cannot be cached
    SOAP is like custom desktop application, closely connected to the server
    SOAP is slower than REST
    It runs on HTTP but envelopes the message

	

     Rest is a service architecture and design for network-based software architectures
    REST supports many different data formats
    REST reads can be cached
    A REST client is more like a browser; it knows how to standardized methods and an application has to fit inside it
    REST is faster than SOAP
    It uses the HTTP headers to hold meta information

	******************************************************************
	Main characteristics of the Web Services  are :

1. Interoperability
2. Extensibility
3. Machine processable descriptions.

for example in simple words , when we call somebody so the person dialing and calling is the client  application , while person receiving the call is server application and "hello" word is the protocol as similar to HTTP request .


Q2 What is the difference between SOA and a web service?

SOA (Service-Oriented Architecture) is an architectural pattern that makes possible for
services to interact with one another independently. 

Web Services is a realization of SOA concept, that leverages XML, JSON, etc. and common Internet protocols such as HTTP(S), SMTP, etc. 
SOA is a system-level architectural style that tries to expose business. WOA is an interface-level architectural style that focuses on the means by which these service capabilities are exposed to consumers.

Q3 What is SOAP?

SOAP (Simple Object Access Protocol) is a transport protocol for sending and receiving requests and responses on XML format, which can be used on top of transport protocols such as HTTP, SMTP, UDP, etc. 

Q4 What is REST?

REST (REpresentational State Transfer) is an architectural style by which data can be transmitted over transport protocol such as HTTP(S).


Q5  What is the difference between a REST web service and a SOAP web service?

Below are the main differences between REST and SOAP web service

    REST supports different formats like text, JSON and XML; SOAP only supports XML;

    REST works only over HTTP(S) on a transport layer; SOAP can be used different protocols on a transport layer;

    REST works with resources, each unique URL is some representation of a resource; SOAP works with operations, which implement some business logic through different interfaces;

    SOAP based reads can’t be cached, for SOAP need to provide caching; REST based reads can be cached;

    SOAP supports SSL security and WS-security(Web Service-security); REST only supports SSL security;

    SOAP supports ACID (Atomicity, Consistency, Isolation, Durability); REST supports transactions, but it is neither ACID compliant nor can provide two phase commit. 

Q6 How  to decide which one of web service to use REST or SOAP? 

“REST vs SOAP” we can rephrased to "Simplicity vs Standard". Of course, "Simplicity" with REST at most cases wins, it wins in performance, scalability and support for multiple data formats, but SOAP is favored where service requires comprehensive support for security (WS-security) and transactional safety (ACID).

 “SOAP”

Q7  What is WSDL?

WSDL (Web Services Description Language) is an XML format for describing web services and how to access them. 


Q8  What is JAX-WS?

JAX-WS (Java API for XML Web Services) is a set of APIs for creating web services in XML format.


Q9 What is JAXB?

JAXB (Java Architecture for XML Binding) is a Java standard that defines how Java objects are converted from and to XML. It makes reading and writing of XML via Java relatively easy.


Q10 Can we send soap messages with attachments?

Yes, we can send different formats such as PDF document, image or other binary file with soap messages as an attachment. Messages send using the binary data. SOAP messages is attached with MIME extensions that come in multipart/related.  
An example:
MIME-Version: 1.0
Content-Type: Multipart/Related; boundary=MIME_boundary; type=text/xml;
        start="<claim061400a.xml@ javahungry.com>"
Content-Description: This is the optional message description.
<?xml version='1.0' ?>
<SOAP-ENV:Envelope
xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
<SOAP-ENV:Body>
..
<theSignedForm href="cid:claim061400a.tiff@javahungry.com"/>
..
</SOAP-ENV:Body>
</SOAP-ENV:Envelope>

--MIME_boundary
Content-Type: image/tiff
Content-Transfer-Encoding: binary
Content-ID: <claim061400a.tiff@javahungry.com>

...binary TIFF image...
--MIME_boundary—


Q11 What is MTOM?

MTOM (Message Transmission Optimization Mechanism) is a mechanism for transmitting large binary attachments with SOAP messages as raw bytes, allowing for smaller messages.

Q12 What is XOP?


XOP (XML-binary Optimized Packaging) is a mechanism defined for the serialization of XML Information Sets that contain binary data, as well as deserialization back into the XML Information Set.

Q13 What is a SOAP envelope element?


SOAP envelop element is the root element of a SOAP message which defines the XML document as a SOAP message.
An example:
<?xml version="1.0"?>
<soap:Envelope
xmlns:soap="http://www.w3.org/2001/12/soap-envelope"
soap:encodingStyle="http://www.w3.org/2001/12/soap-encoding">
  ...
  Message information
  ...
</soap:Envelope>


Q14 What does a SOAP namespace defines?

SOAP namespace defines the Envelope as a SOAP Envelope.
An example:
xmlns:soap=http://www.w3.org/2001/12/soap-envelope


Q15 What is the SOAP encoding?

SOAP encoding is a method for structuring the request which is suggested within the SOAP specification, known as the SOAP serialization.


Q16 What does SOAP encodingStyle attribute defines?
SOAP encodingStyle defines the serialization rules used in a SOAP message. This attribute may appear on any element, and is scoped to that element's contents and all child elements not themselves containing such an attribute. There is no default encoding defined for a SOAP message.
An example: 
SOAP-ENV:encodingStyle="http://www.w3.org/2001/12/soap-encoding"

Q17 What are 2 styles web service’s endpoint by using JAX-WS?

    RPC (remote procedure call) style web service in JAX-WS; 
    document style web service in JAX-WS. 



Q18 What is encoding rules for header entries?

    a header entry is identified by its fully qualified element name, which consists of the namespace URI and the local name. All immediate child elements of the SOAP Header element must be namespace-qualified. 
    the SOAP encodingStyle attribute may be used to indicate the encoding style used for the header entries. 
    the SOAP mustUnderstand attribute and SOAP actor attribute may be used to indicate how to process the entry and by whom. 


Q19 What is the wsimport tool?


The wsimport tool is used to parse an existing Web Services Description Language (WSDL) file and generate required files (JAX-WS portable artifacts) for web service client to access the published web services: https://docs.oracle.com/javase/6/docs/technotes/tools/share/wsimport.html

Q20 What is the wsgen tool?


The wsgen tool is used to parse an existing web service implementation class and generates required files (JAX-WS portable artifacts) for web service deployment: http://docs.oracle.com/javase/6/docs/technotes/tools/share/wsgen.html

    What the tool are required to test SOAP services?


      SOAPUI tool for SOAP WS: http://www.soapui.org/

Q21 What is the difference between SOAP and other remote access techniques?

    SOAP is simple to use and it is non - symmetrical unlike DCOM or CORBA is highly popular and usually have complexity in them.
    SOAP provides greater platform independent with the language independence unlike DCOM or CORBA doesn't provide any of these.
    SOAP uses HTTP as its transport protocol and the data are being saved in XML format that can be ready by human, whereas DCOM or CORBA have their own binary formats that are used to transport the data in complicated manner.
    SOAP identify the object other than URL endpoint. SOAP objects are stateless and it is hard to maintain that. Whereas, it is not hard to maintain in case of other remote access techniques.



“REST”

Q22 What is a resource in a REST?

      A resource is a unique URL with representation of an object which we can get contents via GET and modify via PUT, POST, DELETE.

Q23 What are HTTP methods supported by REST?

    GET;
    POST;
    PUT;
    DELETE;
    OPTIONS;
    HEAD.


Q24 Whether can use GET request instead of POST to create a resource?

It is not possibly, because GET can’t change a resource.

Q25 What is the difference between PUT and POST?
 
Need to use PUT when can update a resource completely through a specific resource. For example, if know that an article resides at http://javahungry.blogspot.com/article/123, can PUT a new resource representation of this article through a PUT on this URL. If do not know the actual resource location for instance, when add a new article, can use POST. 
PUT is idempotent, while POST is not. It means if use PUT an object twice, it has no effect.

Q26 What is WADL?

WADL (Web Application Description Language) is a XML description of a deployed RESTful web application. 


Q27 What are frameworks available to implement REST web services? 

Jersey, Restlet, EasyRest, etc.


Q28 What is the Restlet framework?

Restlet is a lightweight, comprehensive, open source RESTful web API framework for the Java platform. 
It has advantages such as

    websocket and server-sent events support; 
    HTTP/2 support; 
    transparent HTTP PATCH support; 
    client cache service; 
    fluent APIs.

http://restlet.com/

Q29 What is the Jersey framework?

Jersey is open source framework for developing RESTful Web Services in Java that provides support for JAX-RS APIs and serves as a JAX-RS (JSR 311 & JSR 339) Reference Implementation. It has advantages such as 

    contains support for Web Application Description Language (WADL); 
    contains Jersey Test Framework which lets run and test Jersey REST services inside JUnit;   
    supports for the REST MVC pattern, which would allow to return a View from Jersey services rather than just data.

https://jersey.java.net/

Q30 What is the RESTeasy framework?

RESTeasy is a JBoss project, which implements of the JAX-RS specification. It has benefits such as 

    fully certified JAX-RS implementation; supports HTTP 1.1 caching semantics including cache revalidation; 
    JAXB marshalling into XML, JSON, Jackson, Fastinfoset, and Atom as well as wrappers for maps, arrays, lists, and sets of JAXB Objects; 
    OAuth2 and Distributed SSO with JBoss AS7; 
    rich set of providers for: XML, JSON, YAML, Fastinfoset, Multipart, XOP, Atom, etc. 

http://resteasy.jboss.org/

Q31 What is the difference between AJAX and REST?

    in Ajax, the request are sent to the server by using XMLHttpRequest objects; REST have a URL structure and a request/response pattern the revolve around the use of resources;
    Ajax eliminates the interaction between the customer and server asynchronously; REST requires the interaction between the customer and server;
    Ajax is a set of technology; REST is a type of software architecture and a method for users to request data or information from servers.


Q32 What tool are required to test REST services?

Firefox “poster” plugin for RESTFUL services. https://addons.mozilla.org/en-us/firefox/addon/poster/

web services interview questions and answers











Q33 What does a @Path annotation do? 

     @Path annotation binds URI pattern to a Java method.



import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.core.Response;

@Path("/persons")
public class PersonRestService {

@GET
public Response getPerson() {

return Response.status(200).entity("getPerson is called").build();

} 

@GET
@Path("/vip")
public Response getPersonVIP() {

return Response.status(200).entity("getPersonVIP is called").build();

 }
}


On calling URI: “/persons” result:  getPerson is called
On calling URI: “/persons/vip” result:  getPersonVIP is called

Q34  What does a @PathParam do?


     @PathParam annotation injects the value of URI parameter that defined in @Path expression.

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.core.Response;

@Path("/persons")
public class PersonRestService {

@GET
@Path("{id}")
public Response getPersonById(@PathParam("id") String id) {

  return Response.status(200).entity("getPersonById is called, id : " + id).build();
 }
}



On calling URI: “/persons/1” result:  getPersonById is called, id : 1

Q35  What does a @QueryParam do?


    @QueryParam annotation injects URI query parameter into Java method.

import java.util.List;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Response;

@Path("/persons")
public class PersonService {

@GET
@Path("/query")
public Response getPersons(
@QueryParam("from") int from,
@QueryParam("to") int to,
@QueryParam("orderBy") List&lt;String&gt; orderBy) {

return Response
  .status(200)
  .entity("getPersons is called, from : " + from + ", to : " + to
+ ", orderBy" + orderBy.toString()).build();

 }
}


On calling URI: “/persons/query?from=10&to=20&orderBy=age&orderBy=name” result: getPersons is called, from : 10, to : 20, orderBy[age, name]


Q36  What does a @MatrixParam do?


@MatrixParam are a set of “name=value” in URI path.

import javax.ws.rs.GET;
import javax.ws.rs.MatrixParam;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.core.Response;

@Path("/books")
public class BookService {

@GET
@Path("{year}")
public Response getBooks(@PathParam("year") String year,
@MatrixParam("author") String author,
@MatrixParam("country") String country) {

return Response
.status(200)
.entity("getBooks is called, year : " + year
+ ", author : " + author + ", country : " + country)
.build();

 }
}


On calling URI: “/books/2015” result: getBooks is called, year : 2015, author : null, country : null
On calling URI: “/books/2015;author= doyle;country=scotland” result: getBooks is called, year : 2015, author : doyle, country : scotland

Q37  What does a @FormParam do?


@FormParam bind HTML form parameters value to a Java method.

import javax.ws.rs.FormParam;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.core.Response;

@Path("/persons")
public class PersonService {

@POST
@Path("/add")
public Response addPerson(
@FormParam("name") String name,
@FormParam("age") int age) {

return Response.status(200)
.entity("addPerson is called, name : " + name + ", age : " + age)
.build();

 }
}



HTML form:

<html>
<body>
<form action="/persons/add" method="post">
<p>
Name : <input type="text" name="name" />
</p>
<p>
Age : <input type="text" name="age" />
</p>
<input type="submit" value="Add Person" />
</form>

</body>
</html>


Q39  How to get HTTP request header in JAX-RS (2 ways)?

    inject directly with @HeaderParam;



import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.HeaderParam;
import javax.ws.rs.core.Response;




@Path("/persons")
public class PersonService {

@GET
@Path("/get")
public Response getPerson(
@HeaderParam("person-agent") String personAgent) {

return Response.status(200)
.entity("getPerson is called, personAgent : " + personAgent)
.build();

 }
}


On calling URI: “/persons/get” result: getPerson is called, personAgent : Mozilla/5.0 (Windows NT 6.1; rv:5.0) Gecko/20100101 Firefox/5.0

    pragmatically via @Context.



import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.Response;

@Path("/persons")
public class PersonService {

@GET
@Path("/get")
public Response getPerson(@Context HttpHeaders headers) {

String personAgent = headers.getRequestHeader("person-agent").get(0);

return Response.status(200)
.entity("getPerson is called, personAgent : " + personAgent)
.build();

 }
}


On calling URI: “/persons/get” result: getPerson is called, personAgent : Mozilla/5.0 (Windows NT 6.1; rv:5.0) Gecko/20100101 Firefox/5.0

Q40  How to download file in JAX-RS?

    put @Produces(“?”) on service method, with a Response return type. Instead “?” write a type text/plain, image/png, etc. 
    set “Content-Disposition” in Response header to tell browser pop up a download box for user to download.


import java.io.File;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.ResponseBuilder;

@Path("/image")
public class ImageService {

private static final String FILE_PATH = "c:\\my.png";

@GET
@Path("/get")
@Produces("image/png")
public Response getFile() {

File file = new File(FILE_PATH);

ResponseBuilder response = Response.ok((Object) file);
response.header("Content-Disposition",
"attachment; filename=image_from_server.png");
return response.build();
 }
}



Please mention in the comments if you have any doubts regarding java web services interview questions and answers.



About The Author
Subham Mittal has worked in Oracle for 3 years .
For more java articles ,Click here to Subscribe JavaHungry


You might also like

    How to Register and Buy Oracle Java Certification Exam (SCJP/OCPJP/OCAJP) | Java Hungry
    Java 8 new features : Lambda expressions , optional class , Defender methods with examples | Java Hungry
    Data Structure in Java | Java Hungry
    Anagram Program in Java with Code and Example | Java Hungry

Recommended by




WHATS HOT


    Difference between Arraylist and Vector : Core Java Interview Collection Question


    Best Books for Learning Java


    Amazon Interview Question : First Non repeated character in String


    Count total number of times each alphabet appears in the string java program code with example


    Java 8 new features : Lambda expressions , optional class , Defender methods with examples







Subscribe for Our Newsletter



POPULAR POSTS

    Java Interview Questions


    Top 50 Java Collections Interview Questions and Answers


    What Makes You Stand out from the Crowd


    Java Multithreading Interview Questions and Answers


    Count number of words in the String with Example : Java Program Code

very imp : http://javahungry.blogspot.com/2015/07/web-services-interview-questions-and-answers.html
********************************************
1) What is Web Service?

Web Service is a software system for communicating two devices over the network. More details...
2) How does a web service work?

A web service is used to communicate among various applications by using open standards such as HTML, XML, WSDL, and SOAP. You can build a Java-based web service on Solaris that is accessible from your Visual Basic program that runs on Windows. You can also use C# to build new web services on Windows that can be invoked from your web application that is based on JavaServer Pages (JSP) and runs on Linux.
3) What are the advantages of web services?

    Interoperability: By the help of web services, an application can communicate with other application developed in any language.
    Reusability: We can expose the web service so that other applications can use it.
    Modularity: By the help of web service, we can create a service for a specific task such as tax calculation etc.

More details...
4) What are the different types of web services?

There are two types of web services:

    SOAP
    RESTful

5) What are the main features of web services?

Following is a list of main features of web services:

    It is available over the Internet or private (intranet) networks.
    It uses a standardized XML messaging system.
    It is not tied to any one operating system or programming language.
    It is self-describing via a common XML grammar.
    It is discoverable via a simple find mechanism.

6) What is SOAP?

SOAP stands for Simple Object Access Protocol. It is a XML-based protocol for accessing web services. More details...
7) What are the advantages of SOAP web services?

    WS Security
    Language Independent
    Platform Independent

More details...
8) What are the disadvantages of SOAP web services?

    Slow
    WSDL Dependent

More details...
9) What are the main features of SOAP?

The following list specifies the features of SOAP:

    SOAP is a communication protocol.
    SOAP is used for communication between applications.
    SOAP is a format for sending messages.
    SOAP is designed to communicate via Internet.
    SOAP is platform independent.
    SOAP is language independent.
    SOAP is simple and extensible.
    SOAP allows you to get around firewalls.
    SOAP will be developed as a W3C standard.

10) What is WSDL?

WSDL stands for Web Services Description Language. It is a xml document containing information about web services such as method name, method parameter etc. More details...
11) What is UDDI?

UDDI stands for Universal Description, Discovery and Integration. It is a XML based framework for describing, discovering and integrating web services. It contains a list of available web services. WSDL is the part of UDDI. More details...
12) What is RESTful web services?

REST stands for REpresentational State Transfer. It is a architectural style. It is not a protocol like SOAP. More details...
13) What are the advantages of RESTful web services?

    Fast
    Language Independent
    Platform Independent
    Can use SOAP.
    Allows different data format.

More details...
12) What is the difference between SOAP and REST web services?
No.	SOAP	REST
1)	SOAP is a protocol.	REST is an architectural style.
2)	SOAP stands for Simple Object Access Protocol.	REST stands for REpresentational State Transfer.
3)	SOAP can't use REST because it is a protocol.	REST can use SOAP web services because it is a concept and can use any protocol like HTTP, SOAP.
4)	SOAP uses services interfaces to expose the business logic.	REST uses URI to expose business logic.
5)	SOAP defines standards to be strictly followed. 	REST does not define too much standards like SOAP.
6)	SOAP permits XML data format only.	REST permits different data format such as Plain text, HTML, XML, JSON etc.
More details...
13) What is SOA?

SOA stands for Service Oriented Architecture. It is a design pattern to provide services to other application through protocol. More details...
14) What tools are used to test web services?

    SoapUI tool for testing SOAP and RESTful web services
    Poster for firefox browser
    Postman extension for Chrome

15) What is the advantage of XML in web service?

In Web service, an XML is used to tag the data, format the data.
16) What is the usage of WSDL in a web service?

WSDL is used in web service to describe the availability of service.
17) What is Interoperability in Web services?

Web services facilitate various applications to communicate with each other and share data and services among themselves. Other applications can also use the web services. For example, a VB or .NET application can communicate with a Java web services and vice versa. Web services are used to make the application platform and technology independent.
18) Explain the loosely coupled architecture of web services.

A consumer of a web service is not tied to that web service directly. The web service interface can change over time without compromising the client's ability to interact with the service. A tightly coupled system implies that the client and server logic are closely tied to one another, implying that if one interface changes, the other must be updated. Adopting a loosely coupled architecture tends to make software systems more manageable and facilitates simpler integration between different systems.
19) What are the advantages of having XML based Web services?

Using XML eliminates any networking, operating system, or platform binding. So Web Services based applications are highly interoperable application at their core level.
20) What do you mean by synchronicity?

Synchronicity is used to bind the client to the execution of the service. In synchronous invocations, the client blocks and waits for the service to complete its operation before continuing. On the other hand, synchronous operations facilitate a client to invoke a service and then execute other functions.
21) What is the usage of Service Transport Layer in Web service protocol stack?

The Service Transport Layer is used to transport messages between applications.

This layer includes Hyper Text Transport Protocol (HTTP), Simple Mail Transfer Protocol (SMTP), File Transfer Protocol (FTP), and newer protocols like Blocks Extensible Exchange Protocol (BEEP).
22) What is the usage of Service Description layer in Web Service Protocol Stack?

The Service Description layer is used to describe the public interface to a specific web service. Currently, service description is handled via the Web Service Description Language (WSDL).
23) What is the usage of Service Discovery layer in Web Service Protocol Stack?

The Service Discovery layer is used for centralizing services into a common registry and providing easy publish/find functionality.

Currently, service discovery is handled via Universal Description, Discovery, and Integration (UDDI).
