My changess


1.What is Spring Framework?
Spring is one of the most widely used Java EE framework. Spring framework core concepts are “Dependency Injection” and “Aspect Oriented Programming”.
Spring framework can be used in normal java applications also to achieve loose coupling between different components by implementing dependency injection and we can perform cross cutting tasks such as logging and authentication using spring support for aspect oriented programming.
I like spring because it provides a lot of features and different modules for specific tasks such as Spring MVC.Since it’s an open source framework with a lot of online resources and active community members, working with Spring framework is easy and fun at same time.

2.What are some of the important features and advantages of Spring Framework?
Spring Framework is built on top of two design concepts – Dependency Injection and Aspect Oriented Programming.
Some of the features of spring framework are:
        Lightweight and very little overhead of using framework for our development because Spring framework is divided into several modules.
		For example, if we don’t need Spring transaction management features, we don’t need to add that dependency in our project.
        Dependency Injection or Inversion of Control to write components that are independent of each other, spring container takes care of wiring them together to achieve our work.
        Spring IoC container manages Spring Bean life cycle.
		Reduces the amount of boiler-plate code, such as initializing objects, open/close resources.
		we can perform cross cutting tasks such as logging and authentication using spring support for aspect oriented programming
        Spring MVC framework can be used to create web applications as well as restful web services capable of returning XML as well as JSON response.
        Support for transaction management, JDBC operations, File uploading, Exception Handling etc with very little configurations, either by using annotations or by spring bean configuration file.

3.What do you understand by Dependency Injection?
	Dependency Injection design pattern allows us to remove the hard-coded dependencies and make our application loosely coupled, extendable and maintainable. We can implement dependency injection pattern to move the dependency resolution from compile-time to runtime.

    Some of the benefits of using Dependency Injection are: Separation of Concerns, Boilerplate Code reduction, Configurable components and easy unit testing.
	We can use Spring XML based as well as Annotation based configuration to implement DI in spring applications.
	
4.What are the benefits of using Spring Tool Suite?
	We can install plugins into Eclipse to get all the features of Spring Tool Suite. However STS comes with Eclipse with some other important stuffs such as Maven support, Templates for creating different types of Spring projects and tc server for better performance with Spring applications.
	I like STS because it highlights the Spring components and if you are using AOP pointcuts and advices, then it clearly shows which methods will come under the specific pointcut. So rather than installing everything on our own, I prefer using STS when developing Spring based applications.

5.Name some of the important Spring Modules?
	Some of the important Spring Framework modules are:
        Spring Context – for dependency injection.
        Spring AOP – for aspect oriented programming.
        Spring DAO – for database operations using DAO pattern
        Spring JDBC – for JDBC and DataSource support.
        Spring ORM – for ORM tools support such as Hibernate
        Spring Web Module – for creating web applications.
        Spring MVC – Model-View-Controller implementation for creating web applications, web services etc.

6.Difference
	One difference between bean factory and application context is that bean factory only instantiate bean when you call getBean() method while ApplicationContext instantiates Singleton bean when the container is started,  It doesn't wait for getBean to be called

	Before seeing difference between ApplicationContext and BeanFactory, let see some similarity between both of them. Spring provides two kinds of IOC container, one is BeanFactory and other is ApplicationContext. Syntactically BeanFactory and ApplicationContext both are Java interfaces and ApplicationContext extends BeanFactory. Both of them are configuration using XML configuration file. In short BeanFactory provides basic IOC and DI features while ApplicationContext provides advanced features. Apart from these, Here are few more difference between BeanFactory and ApplicationContext which is mostly based upon features supported by them.


	1) BeanFactory doesn't provide support for internationalization i.e. i18n but ApplicationContext provides support for it.

	2) Another difference between BeanFactory vs ApplicationContext is ability to publish event to beans that are registered as listener.

	3) One of the popular implementation of BeanFactory interface is XMLBeanFactory while one of the popular implementation of ApplicationContext interface is ClassPathXmlApplicationContext. On Java web application we use WebApplicationContext  which extends ApplicationContext interface and adds getServletContext method.

	4) If you are using auto wiring and using BeanFactory than you need to register AutoWiredBeanPostProcessor using API which you can configure in XML if you are using  ApplicationContext. In summary BeanFactory is OK for testing and non production use but ApplicationContext is more feature rich container implementation and should be favored over BeanFactory

	public static void main(String args[]){
	ApplicationContext ctx =new ClassPathXmlApplicationContext("beans.xml");
	Hello hello =(Hello) ctx.getBean("hello");
	hello.sayHello("John");
	}

	here beans.xml is your spring configuration file and “hello” is a bean defined in that spring configuration file. Here we have used ClassPathXmlApplicationContext  which is an implementation of ApplicationContext interface in Spring.


7.what is waving and types of waving:
http://www.baeldung.com/aspectj


8.What is the difference between Spring AOP and AspectJ AOP?

    AspectJ is the industry-standard implementation for Aspect Oriented Programming whereas Spring implements AOP for some cases. Main differences between Spring AOP and AspectJ are:
        Spring AOP is simpler to use than AspectJ because we don’t need to worry about the weaving process.
        Spring AOP supports AspectJ annotations, so if you are familiar with AspectJ then working with Spring AOP is easier.
        Spring AOP supports only proxy-based AOP, so it can be applied only to method execution join points. AspectJ support all kinds of pointcuts.
        One of the shortcoming of Spring AOP is that it can be applied only to the beans created through Spring Context.
		
9.What is Spring IoC Container?

    Inversion of Control (IoC) is the mechanism to achieve loose-coupling between Objects dependencies. To achieve loose coupling and dynamic binding of the objects at runtime.

    Spring Framework IoC container classes are part of org.springframework.beans and org.springframework.context packages and provides us different ways to decouple the object dependencies.

    Some of the useful ApplicationContext implementations that we use are;
        AnnotationConfigApplicationContext: For standalone java applications using annotations based configuration.
        ClassPathXmlApplicationContext: For standalone java applications using XML based configuration.
        FileSystemXmlApplicationContext: Similar to ClassPathXmlApplicationContext except that the xml configuration file can be loaded from anywhere in the file system.
        AnnotationConfigWebApplicationContext and XmlWebApplicationContext for web applications.

10.What is a Spring Bean?

    Any normal java class that is initialized by Spring IoC container is called Spring Bean. We use Spring ApplicationContext to get the Spring Bean instance.
	Spring IoC container manages the life cycle of Spring Bean, bean scopes and injecting any required dependencies in the bean.

11.What is the importance of Spring bean configuration file?

    We use Spring Bean configuration file to define all the beans that will be initialized by Spring Context. When we create the instance of Spring ApplicationContext, it reads the spring bean xml file and initialize all of them. Once the context is initialized, we can use it to get different bean instances.
	Apart from Spring Bean configuration, this file also contains spring MVC interceptors, view resolvers and other elements to support annotations based configurations.

12.What are different ways to configure a class as Spring Bean?

    There are three different ways to configure Spring Bean.
        XML Configuration: This is the most popular configuration and we can use bean element in context file to configure a Spring Bean. For example:

        <bean name="myBean" class="com.journaldev.spring.beans.MyBean"></bean>

        Java Based Configuration: If you are using only annotations, you can configure a Spring bean using @Bean annotation. This annotation is used with @Configuration classes to configure a spring bean. Sample configuration is:

        @Configuration
        @ComponentScan(value="com.journaldev.spring.main")
        public class MyConfiguration {

        	@Bean
        	public MyService getService(){
        		return new MyService();
        	}
        }

        To get this bean from spring context, we need to use following code snippet:

        AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(
        		MyConfiguration.class);
        MyService service = ctx.getBean(MyService.class);

        Annotation Based Configuration: We can also use @Component, @Service, @Repository and @Controller annotations with classes to configure them to be as spring bean. For these, we would need to provide base package location to scan for these classes. For example:

        <context:component-scan base-package="com.journaldev.spring" />

13.What are different scopes of Spring Bean?

    There are five scopes defined for Spring Beans.
        singleton: Only one instance of the bean will be created for each container. This is the default scope for the spring beans. While using this scope, make sure spring bean doesn’t have shared instance variables otherwise it might lead to data inconsistency issues because it’s not thread-safe.
        prototype: A new instance will be created every time the bean is requested.
        request: This is same as prototype scope, however it’s meant to be used for web applications. A new instance of the bean will be created for each HTTP request.
        session: A new bean will be created for each HTTP session by the container.
        global-session: This is used to create global session beans for Portlet applications.(pluggable applications like news, forum , weather report m email)

    Spring Framework is extendable and we can create our own scopes too, however most of the times we are good with the scopes provided by the framework.

    To set spring bean scopes we can use “scope” attribute in bean element or @Scope annotation for annotation based configurations.

14.What is Spring Bean life cycle?

	1) Spring container looks for the definition of the bean in the spring configuration xml file

	2) Spring instantiate the bean by calling no argument default constructor of that class,
	If there is only parameterized constructor in the class , then bean must be defined in spring xml file with constructor injection using which container will instantiate the bean otherwise it will throw bean creation exception.

	2) Spring injects the values and references if any into bean’s properties.

	3) If the bean implements BeanNameAware interface, Spring passes the bean’s ID to the setBeanName () method and executes this method.

	4)If the bean implements BeanClassLoaderAware interface, Spring passes the bean’s instance to the setBeanClassLoader () method and executes this method
	
	5) If the bean implements BeanFactoryAware interface, Spring calls the setBeanFactory () method, passing in the bean factory itself and executes this method.

	6) If the bean implements ApplicationContextAware interface, Spring will call the setApplicationContext () method, passing in a reference to the current application context and executes this method.

	7) If the bean implements the BeanPostProcessor interface, Spring calls their postProcessBeforeInitialization () method

	8) Now the method annotated with @PostConstruct is called.  
	
	9)If the bean implements the InitializingBean interface, Spring calls afterPropertiesSet() method after all the properties of that bean are set.
	Similarly, if the bean is declared with an init-method, then the specified initialization method will be called

	10) If the bean implements BeanPostProcessor, Spring will call their postProcessAfterInitialization() method.
	
	11) At this point, the bean is ready to be used by the application and will remain in the application context until the application context is destroyed.
	
	12)Now when the ApplicationContext shuts down such as by using registerShutdownHook() then the method annotated with @PreDestroy is called. 
	
	) If the bean implements the DisposableBean interface, then Spring will call the destroy() method. Likewise, if any bean was declared with a destroy-method, then the specified method will be called.
	
	14)Before garbage collection, finalize() method of Object is called.

15.How to get ServletContext and ServletConfig object in a Spring Bean?

    There are two ways to get Container specific objects in the spring bean.
		1.Implementing Spring *Aware interfaces, for these ServletContextAware and ServletConfigAware interfaces:
				public class HomeController implements ServletContextAware, ServletConfigAware {

		private ServletContext context;
		private ServletConfig config;

		@Override
		public void setServletConfig( ServletConfig servletConfig) {
		this.config = servletConfig;

		}

		@Override
		public void setServletContext(ServletContext servletContext) {
		this.context = servletContext;
		}
		
		2.Using @Autowired annotation with bean variable of type ServletContext and ServletConfig. They will work only in servlet container specific environment only though.
	
		@Autowired
        ServletContext servletContext;

16.What is Bean wiring and @Autowired annotation?

    The process of injection spring bean dependencies while initializing it called Spring Bean Wiring.

    Usually it’s best practice to do the explicit wiring of all the bean dependencies, but spring framework also supports autowiring. We can use @Autowired annotation with fields or methods for autowiring byType. For this annotation to work, we also need to enable annotation based configuration in spring bean configuration file. This can be done by context:annotation-config element.
	What are different types of Spring Bean autowiring?

    There are four types of autowiring in Spring framework.
        autowire byName
        autowire byType
        autowire by constructor
        autowiring by @Autowired and @Qualifier annotations

    Prior to Spring 3.1, autowire by autodetect was also supported that was similar to autowire by constructor or byType. For more details about these options, please read Spring Bean Autowiring.

17.Does Spring Bean provide thread safety?

    The default scope of Spring bean is singleton, so there will be only one instance per context. That means that class level variable that any thread can update will lead to inconsistent data. Hence in default mode spring beans are not thread-safe.

    However we can change spring bean scope to request, prototype or session to achieve thread-safety at the cost of performance. It’s a design decision and based on the project requirements.

18.What is a Controller in Spring MVC?

    Just like MVC design pattern, Controller is the class that takes care of all the client requests and send them to the configured resources to handle it. In Spring MVC, org.springframework.web.servlet.DispatcherServlet is the front controller class that initializes the context based on the spring beans configurations.

    A Controller class is responsible to handle different kind of client requests based on the request mappings. We can create a controller class by using @Controller annotation. Usually it’s used with @RequestMapping annotation to define handler methods for specific URI mapping.

19.What’s the difference between @Component, @Controller, @Repository & @Service annotations in Spring?

    @Component is used to indicate that a class is a component. These classes are used for auto detection and configured as bean, when annotation based configurations are used.

    @Controller is a specific type of component, used in MVC applications and mostly used with RequestMapping annotation.

    @Repository annotation is used to indicate that a component is used as repository and a mechanism to store/retrieve/search data. We can apply this annotation with DAO pattern implementation classes.

    @Service is used to indicate that a class is a Service. Usually the business facade classes that provide some services are annotated with this.

    We can use any of the above annotations for a class for auto-detection but different types are provided so that you can easily distinguish the purpose of the annotated classes.

20.What is DispatcherServlet and ContextLoaderListener?

    DispatcherServlet is the front controller in the Spring MVC application and it loads the spring bean configuration file and initialize all the beans that are configured. If annotations are enabled, it also scans the packages and configure any bean annotated with @Component, @Controller, @Repository or @Service annotations.

    ContextLoaderListener is the listener to start up and shut down Spring’s root WebApplicationContext. It’s important functions are to tie up the lifecycle of ApplicationContext to the lifecycle of the ServletContext and to automate the creation of ApplicationContext. We can use it to define shared beans that can be used across different spring contexts.

21.What is ViewResolver in Spring?

    ViewResolver implementations are used to resolve the view pages by name. Usually we configure it in the spring bean configuration file. For example:

    <!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
    <beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    	<beans:property name="prefix" value="/WEB-INF/views/" />
    	<beans:property name="suffix" value=".jsp" />
    </beans:bean>

    InternalResourceViewResolver is one of the implementation of ViewResolver interface and we are providing the view pages directory and suffix location through the bean properties. So if a controller handler method returns “home”, view resolver will use view page located at /WEB-INF/views/home.jsp.

22.What is a MultipartResolver and when its used?

    MultipartResolver interface is used for uploading files – CommonsMultipartResolver and StandardServletMultipartResolver are two implementations provided by spring framework for file uploading. By default there are no multipart resolvers configured but to use them for uploading files, all we need to define a bean named “multipartResolver” with type as MultipartResolver in spring bean configurations.

    Once configured, any multipart request will be resolved by the configured MultipartResolver and pass on a wrapped HttpServletRequest. Then it’s used in the controller class to get the file and process it. For a complete example, please read Spring MVC File Upload Example.
	https://www.javatpoint.com/spring-mvc-file-upload
	
23.How to handle exceptions in Spring MVC Framework?

    Spring MVC Framework provides following ways to help us achieving robust exception handling.
        Controller Based – We can define exception handler methods in our controller classes. All we need is to annotate these methods with @ExceptionHandler annotation.
        Global Exception Handler – Exception Handling is a cross-cutting concern and Spring provides @ControllerAdvice annotation that we can use with any class to define our global exception handler.
        HandlerExceptionResolver implementation – For generic exceptions, most of the times we serve static pages. Spring Framework provides HandlerExceptionResolver interface that we can implement to create global exception handler. The reason behind this additional way to define global exception handler is that Spring framework also provides default implementation classes that we can define in our spring bean configuration file to get spring framework exception handling benefits.
   For a complete example, please read Spring Exception Handling Example.
https://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc
https://www.mkyong.com/spring-mvc/spring-mvc-exceptionhandler-example/

24: What is the difference between @Controller and @RestController in Spring MVC? (answer)
Even though both are used to indicate that a Spring bean is a Controller in Spring MVC setup, @RestController is better when you are developing RESTful web services using Spring MVC framework. It's a combination of @Controller + @ResponseBody annotation which allows the controller to directly write the response and bypassing the view resolution process, which is not required for RESTful web service. 

It also instructs DispatcherServlet to use different HttpMessageConverters to represent the response in the format client is expecting e.g. HttpMessageJackson2Convert to represent response in JSON format and JAXB based message converts to generate XML response

25.Can we have multiple Spring configuration files?

    For Spring MVC applications, we can define multiple spring context configuration files through contextConfigLocation. This location string can consist of multiple locations separated by any number of commas and spaces. For example;

    <servlet>
    	<servlet-name>appServlet</servlet-name>
    	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    	<init-param>
                <param-name>contextConfigLocation</param-name>
    	    <param-value>/WEB-INF/spring/appServlet/servlet-context.xml,/WEB-INF/spring/appServlet/servlet-jdbc.xml</param-value>
    	</init-param>
    	<load-on-startup>1</load-on-startup>
    </servlet>

    We can also define multiple root level spring configurations and load it through context-param. For example;

    <context-param>
    	<param-name>contextConfigLocation</param-name>
    	<param-value>/WEB-INF/spring/root-context.xml /WEB-INF/spring/root-security.xml</param-value>
    </context-param>

    Another option is to use import element in the context configuration file to import other configurations, for example:

    <beans:import resource="spring-jdbc.xml"/>

26.What is ContextLoaderListener?

    ContextLoaderListener is the listener class used to load root context and define spring bean configurations that will be visible to all other contexts. It’s configured in web.xml file as:

    <context-param>
    	<param-name>contextConfigLocation</param-name>
    	<param-value>/WEB-INF/spring/root-context.xml</param-value>
    </context-param>
    	
    <listener>
    	<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

27.What are the minimum configurations needed to create Spring MVC application?

    For creating a simple Spring MVC application, we would need to do following tasks.
        Add spring-context and spring-webmvc dependencies in the project.
        Configure DispatcherServlet in the web.xml file to handle requests through spring container.
        Spring bean configuration file to define beans, if using annotations then it has to be configured here. Also we need to configure view resolver for view pages.
        Controller class with request mappings defined to handle the client requests.

    Above steps should be enough to create a simple Spring MVC Hello World application.
    How would you relate Spring MVC Framework to MVC architecture?

    As the name suggests Spring MVC is built on top of Model-View-Controller architecture. DispatcherServlet is the Front Controller in the Spring MVC application that takes care of all the incoming requests and delegate it to different controller handler methods.

    Model can be any Java Bean in the Spring Framework, just like any other MVC framework Spring provides automatic binding of form data to java beans. We can set model beans as attributes to be used in the view pages.

    View Pages can be JSP, static HTMLs etc. and view resolvers are responsible for finding the correct view page. Once the view page is identified, control is given back to the DispatcherServlet controller. DispatcherServlet is responsible for rendering the view and returning the final response to the client.

28.How to achieve localization in Spring MVC applications?

    Spring provides excellent support for localization or i18n through resource bundles. Basis steps needed to make our application localized are:
        Creating message resource bundles for different locales, such as messages_en.properties, messages_fr.properties etc.
        Defining messageSource bean in the spring bean configuration file of type ResourceBundleMessageSource or ReloadableResourceBundleMessageSource.
        For change of locale support, define localeResolver bean of type CookieLocaleResolver and configure LocaleChangeInterceptor interceptor. Example configuration can be like below:

        <beans:bean id="messageSource"
        class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <beans:property name="basename" value="classpath:messages" />
        <beans:property name="defaultEncoding" value="UTF-8" />
        </beans:bean>
         
        <beans:bean id="localeResolver"
            class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
            <beans:property name="defaultLocale" value="en" />
            <beans:property name="cookieName" value="myAppLocaleCookie"></beans:property>
            <beans:property name="cookieMaxAge" value="3600"></beans:property>
        </beans:bean>
         
        <interceptors>
            <beans:bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
                <beans:property name="paramName" value="locale" />
            </beans:bean>
        </interceptors>

        Use spring:message element in the view pages with key names, DispatcherServlet picks the corresponding value and renders the page in corresponding locale and return as response.

    For a complete example, please read Spring Localization Example.

29.How can we use Spring to create Restful Web Service returning JSON response?

    We can use Spring Framework to create Restful web services that returns JSON data. Spring provides integration with Jackson JSON API that we can use to send JSON response in restful web service.

    We would need to do following steps to configure our Spring MVC application to send JSON response:
        Adding Jackson JSON dependencies, if you are using Maven it can be done with following code:

        <!-- Jackson -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${jackson.databind-version}</version>
        </dependency>

        Configure RequestMappingHandlerAdapter bean in the spring bean configuration file and set the messageConverters property to MappingJackson2HttpMessageConverter bean. Sample configuration will be:

        <!-- Configure to plugin JSON as request and response in method handler -->
        <beans:bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
            <beans:property name="messageConverters">
                <beans:list>
                    <beans:ref bean="jsonMessageConverter"/>
                </beans:list>
            </beans:property>
        </beans:bean>
             
        <!-- Configure bean to convert JSON to POJO and vice versa -->
        <beans:bean id="jsonMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        </beans:bean>

        In the controller handler methods, return the Object as response using @ResponseBody annotation. Sample code:

        @RequestMapping(value = EmpRestURIConstants.GET_EMP, method = RequestMethod.GET)
        public @ResponseBody Employee getEmployee(@PathVariable("id") int empId) {
            logger.info("Start getEmployee. ID="+empId);
             
            return empData.get(empId);
        }

        You can invoke the rest service through any API, but if you want to use Spring then we can easily do it using RestTemplate class.

    For a complete example, please read Spring Restful Webservice Example.

30.What are some of the important Spring annotations you have used?

    Some of the Spring annotations that I have used in my project are:
        @Controller – for controller classes in Spring MVC project.
        @RequestMapping – for configuring URI mapping in controller handler methods. This is a very important annotation, so you should go through Spring MVC RequestMapping Annotation Examples
        @ResponseBody – for sending Object as response, usually for sending XML or JSON data as response.
        @PathVariable – for mapping dynamic values from the URI to handler method arguments.
        @Autowired – for autowiring dependencies in spring beans.
        @Qualifier – with @Autowired annotation to avoid confusion when multiple instances of bean type is present.
        @Service – for service classes.
        @Scope – for configuring scope of the spring bean.
        @Configuration, @ComponentScan and @Bean – for java based configurations.
        AspectJ annotations for configuring aspects and advices, @Aspect, @Before, @After, @Around, @Pointcut etc.

31.

32.

33.How to validate form data in Spring Web MVC Framework?

    Spring supports JSR-303 annotation based validations as well as provide Validator interface that we can implement to create our own custom validator. For using JSR-303 based validation, we need to annotate bean variables with the required validations.

    For custom validator implementation, we need to configure it in the controller class. For a complete example, please read Spring MVC Form Validation Example.

34.What is Spring MVC Interceptor and how to use it?

    Spring MVC Interceptors are like Servlet Filters and allow us to intercept client request and process it. We can intercept client request at three places – preHandle, postHandle and afterCompletion.

    We can create spring interceptor by implementing HandlerInterceptor interface or by extending abstract class HandlerInterceptorAdapter.

    We need to configure interceptors in the spring bean configuration file. We can define an interceptor to intercept all the client requests or we can configure it for specific URI mapping too. For a detailed example, please refer Spring MVC Interceptor Example.

37.How would you achieve Transaction Management in Spring?

    Spring framework provides transaction management support through Declarative Transaction Management as well as programmatic transaction management. Declarative transaction management is most widely used because it’s easy to use and works in most of the cases.

    We use annotate a method with @Transactional annotation for Declarative transaction management. We need to configure transaction manager for the DataSource in the spring bean configuration file.

    <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
https://www.journaldev.com/2603/spring-transaction-management-jdbc-example

38.What is Spring DAO?

    Spring DAO support is provided to work with data access technologies like JDBC, Hibernate in a consistent and easy way. For example we have JdbcDaoSupport, HibernateDaoSupport, JdoDaoSupport and JpaDaoSupport for respective technologies.

    Spring DAO also provides consistency in exception hierarchy and we don’t need to catch specific exceptions.

39.How to integrate Spring and Hibernate Frameworks?

    We can use Spring ORM module to integrate Spring and Hibernate frameworks, if you are using Hibernate 3+ where SessionFactory provides current session, then you should avoid using HibernateTemplate or HibernateDaoSupport classes and better to use DAO pattern with dependency injection for the integration.

    Also Spring ORM provides support for using Spring declarative transaction management, so you should utilize that rather than going for hibernate boiler-plate code for transaction management.

    For better understanding you should go through following tutorials:
        Spring Hibernate Integration Example
        Spring MVC Hibernate Integration Example

40.What is Spring Security?

    Spring security framework focuses on providing both authentication and authorization in java applications. It also takes care of most of the common security vulnerabilities such as CSRF attack.

    It’s very beneficial and easy to use Spring security in web applications, through the use of annotations such as @EnableWebSecurity. You should go through following posts to learn how to use Spring Security framework.
        Spring Security in Servlet Web Application
        Spring MVC and Spring Security Integration Example
		example:https://www.mkyong.com/spring-security/spring-security-hello-world-annotation-example/

41.How to inject a java.util.Properties into a Spring Bean?

    We need to define propertyConfigurer bean that will load the properties from the given property file. Then we can use Spring EL support to inject properties into other bean dependencies. For example;

    <bean id="propertyConfigurer" 
      class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
        <property name="location" value="/WEB-INF/application.properties" />
    </bean> 

    <bean class="com.journaldev.spring.EmployeeDaoImpl">
        <property name="maxReadResults" value="${results.read.max}"/>
    </bean>

    If you are using annotation to configure the spring bean, then you can inject property like below.

    @Value("${maxReadResults}") 
    private int maxReadResults;

42.Name some of the design patterns used in Spring Framework?

    Spring Framework is using a lot of design patterns, some of the common ones are:
        Singleton Pattern: Creating beans with default scope.
        Factory Pattern: Bean Factory classes
        Prototype Pattern: Bean scopes
        Adapter Pattern: Spring Web and Spring MVC
        Proxy Pattern: Spring Aspect Oriented Programming support
        Template Method Pattern: JdbcTemplate, HibernateTemplate etc
        Front Controller: Spring MVC DispatcherServlet
        Data Access Object: Spring DAO support
        Dependency Injection and Aspect Oriented Programming

43.What are some of the best practices for Spring Framework?

    Some of the best practices for Spring Framework are:
        Divide spring bean configurations based on their concerns such as spring-jdbc.xml, spring-security.xml.
        Configure bean dependencies as much as possible, try to avoid autowiring as much as possible.
        For application level properties, best approach is to create a property file and read it in the spring bean configuration file.
        For smaller applications, annotations are useful but for larger applications annotations can become a pain. If we have all the configuration in xml files, maintaining it will be easier.
        Use correct annotations for components for understanding the purpose easily. For services use @Service and for DAO beans use @Repository.
        Spring framework has a lot of modules, use what you need. Remove all the extra dependencies that gets usually added when you create projects through Spring Tool Suite templates.
        If you are using Aspects, make sure to keep the join pint as narrow as possible to avoid advice on unwanted methods. 
        Use dependency injection when there is actual benefit, just for the sake of loose-coupling don’t use it because it’s harder to maintain.

44)Aware Interfaces with example:
 http://javainsimpleway.com/spring-aware-interfaces-for-beans/
http://javainsimpleway.com/beannameaware-messagesourceaware-and-resourceloaderaware/

1.Spring program for transaction management, JDBC operations, File uploading, Exception Handling , Localization
https://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc
https://www.mkyong.com/spring-mvc/spring-mvc-exceptionhandler-example/

https://www.javatpoint.com/spring-mvc-file-upload

https://www.journaldev.com/2603/spring-transaction-management-jdbc-example

2. implementation of of  DI
3.

Can you inject null and empty string values in Spring?
Yes, you can.
Describe some of the standard Spring events.
> target Object is a proxy object that is advised by one or more aspects


Spring 2.5: This version was released in 2007. 
Spring 3.0: This version was released in 2009.
Spring 4.0  - 2013
Spring 3.0	
New features in Spring 3.0 compare to its previous version:
- Spring MVC Test Framework
- Asynchronous MVC processing on Servlet 3.0
- custom @Bean definition annotations in @Configuration classes
- @Autowired and @Value to be used as meta-annotations
- Concurrency refinements across the framework
- Loading WebApplicationContexts in the TestContext framework

Spring 4.0
- JCache 0.5 (JSR-107)	New features in Spring 4.0 compare to Spring 3.0:
- JSR-335 Lambda expressions
- JSR-310 Date-Time value types for Spring data binding and formatting.
- JSR-343 JMS 2.0.
- JSR-338 JPA 2.1.
- JSR-349 Bean Validation 1.1.
- JSR-236 Java EE 7 Enterprise Concurrency support.
- JSR-356 Spring’s WebSocket endpoint mode.
- Configuring and implementing Spring style application using Groovy 2. Also they specify that first class support for the Groovy applications.
- Also spring plans to add the HATEOS (Hypermedia as the Engine of Application State) support for REST APIs.

40) What are the different types of AutoProxying?

Following are the different types of AutoProxying:
BeanNameAutoProxyCreator
DefaultAdvisorAutoProxyCreator
example :
https://www.packtpub.com/books/content/autoproxy-spring-aspect-oriented-programming-aop
